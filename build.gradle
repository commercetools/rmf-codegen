buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
    // Here we define all plugins that are used by subprojects and specify the version for external ones

    id 'idea'
    id 'eclipse'
    id "com.github.ben-manes.versions" version "0.28.0"
    id 'maven'
    id 'maven-publish'

    id 'java'
    id 'java-library' // needed to make sure that transitive deps have 'compile' scope
    id 'groovy'
    id 'java-gradle-plugin'

    id 'de.undercouch.download' version '4.0.4'
    id 'com.jfrog.bintray' version '1.8.3' // newer versions produce NPE on publish

    id 'com.gradle.plugin-publish' version '0.11.0'
    id 'org.inferred.processors' version '3.3.0'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'com.palantir.graal' version '0.6.0'
}

ext {
    versions = [
            spock: "1.1-groovy-2.4",
            rmf: "0.2.0-20200810115228",
            kotlin: "1.3.10"
    ]

    commons = [
            lang3: 'org.apache.commons:commons-lang3:3.10',
            cli: 'commons-cli:commons-cli:1.4',
            io: 'commons-io:commons-io:2.6'
    ]
}

import java.text.SimpleDateFormat

def globalVersion = new Version("1.0.0-SNAPSHOT")

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')))
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}


tasks.register("writeVersionToReadme") {
    doLast {
        ant.replaceregexp(match: 'VRAP_VERSION:-[^}]+', replace: "VRAP_VERSION:-\"${globalVersion}\"", flags:'g', byline:true) {
            fileset(dir: "$projectDir/scripts", includes: 'install.sh')
        }
    }
}

subprojects { project ->
    repositories {
        mavenCentral()
        jcenter()
//        maven {
//            url "https://mcculls.github.io/guice-betas/maven2"
//        }
    }

    apply plugin: 'idea'
    apply plugin: 'eclipse'

    apply plugin: 'maven'
    apply plugin: 'maven-publish'

    apply plugin: 'java'
    apply plugin: 'java-library' // needed to make sure that transitive deps have 'compile' scope
    apply plugin: 'groovy'
    apply plugin: 'com.jfrog.bintray'

    group='io.vrap.rmf.codegen'
    version=globalVersion

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
        archiveClassifier = 'sources'
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        publications = [ 'Maven' ]
        publish = true

        pkg {
            repo = 'vrapio'
            name = 'rmf-codegen'
            userOrg = 'vrapio'
            licenses = ['MIT']
            vcsUrl = 'https://github.com/vrapio/rmf-codegen'
        }
    }

    sourceCompatibility = 1.8
}
