buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    // Here we define all plugins that are used by subprojects and specify the version for external ones
    id 'idea'
    id 'eclipse'
    id "com.github.ben-manes.versions" version "0.28.0"
    id 'maven-publish'
    id 'signing'

    id 'java'
    id 'java-library' // needed to make sure that transitive deps have 'compile' scope
    id 'groovy'
    id 'java-gradle-plugin'

    id 'de.undercouch.download' version '4.0.4'

    id 'com.gradle.plugin-publish' version '0.11.0'
    id 'org.inferred.processors' version '3.3.0'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'com.palantir.graal' version '0.9.0'

    id 'io.github.gradle-nexus.publish-plugin' version '1.0.0'
    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id 'org.jetbrains.kotlin.kapt'  version "$kotlinVersion" apply false
}

apply from: 'dependencies.gradle'

ext {
    scmProjectName = rootProject.name
    scmRepo = 'github.com'
    scmProjectPath = "commercetools/rmf-codegen.git"  // github relative path with .git extension
    scmProjectUrl = "https://$scmRepo/$scmProjectPath"      // just as web-page
    scmHttpsUrl = "https://$scmRepo/$scmProjectPath"        // common VCS read access
    scmSshUrl = "git@$scmRepo:$scmProjectPath"              // developers VCS read-write repo
    SNAPSHOT_SUFFIX = "-SNAPSHOT"
    versionWIP = "development$SNAPSHOT_SUFFIX"
}


// maven-specific publishing settings
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    scm {
        connection "scm:git:$scmHttpsUrl"
        developerConnection "scm:git:$scmSshUrl"
        url "$scmProjectUrl"
    }
}


import java.text.SimpleDateFormat

def globalVersion = new Version(version)

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        thisVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
        } else {
            status = 'release'
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')))
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}


tasks.register("writeVersionToReadme") {
    doLast {
        ant.replaceregexp(match: 'VRAP_VERSION:-[^}]+', replace: "VRAP_VERSION:-\"${globalVersion}\"", flags:'g', byline:true) {
            fileset(dir: "$projectDir/scripts", includes: 'install.sh')
        }
    }
}

def excludeProject= [
    'cli-application',
    'codegen-gradle-plugin',
]

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
            username = System.getenv('SONATYPE_USERNAME')
            password = System.getenv('SONATYPE_PASSWORD')
        }
    }
}

group='com.commercetools.rmf'

allprojects {
    description = "RAML API client code generators based on the REST Modeling Framework. https://github.com/vrapio/rest-modeling-framework"

    repositories {
        mavenCentral()
    }
}

subprojects { project ->

    apply plugin: 'idea'
    apply plugin: 'eclipse'

    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    apply plugin: 'java'
    apply plugin: 'java-library' // needed to make sure that transitive deps have 'compile' scope
    apply plugin: 'groovy'
    apply plugin: 'kotlin'

    group 'com.commercetools.rmf'
    version=globalVersion

    test {
        useJUnitPlatform()
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        archiveClassifier = 'sources'
    }

    task javadocJar(type: Jar) {
        group 'build'
        classifier 'javadoc'
        from javadoc
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    dependencies {
        testImplementation junit.junit
        testImplementation assertj.core
        testImplementation javax.annotations
        testImplementation javax.validation
        testImplementation spockframework.spock_core
        testImplementation jackson_core.databind
    }

    if (project.file("build.gradle").exists() && !excludeProject.contains(project.name)) {
        publishing {
            repositories {
                maven {
                    if (version.status == 'release') {
                        url("https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/")
                    } else {
                        url("https://central.sonatype.com/repository/maven-snapshots/")
                    }
                    credentials {
                        username System.getenv('SONATYPE_USERNAME') ?: ''
                        password System.getenv("SONATYPE_PASSWORD") ?: ''
                    }
                }
            }
            publications {
                Maven(MavenPublication) {
                    from components.java
                    artifact sourcesJar
                    artifact javadocJar
                    artifactId project.name
                    version version
                    groupId group

                    pom {
                        name = project.name
                        description = project.description
                        developers {
                            developer {
                                id = "jenschude"
                                name = "Jens Schulze"
                                email = "jens.schulze@commercetools.com"
                            }
                        }
                        url = scmHttpsUrl
                    }
                    pom.withXml {
                        def root = asNode()
                        root.children().last() + pomConfig
                    }
                }
            }
        }

        signing {
            useGpgCmd()
            sign publishing.publications.Maven
        }
    }

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}
