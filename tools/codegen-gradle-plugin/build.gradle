
apply plugin: 'java-gradle-plugin'
apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'com.github.johnrengelman.shadow'

dependencies {
    implementation project(':languages:javalang:java-renderer')
    implementation project(':languages:javalang:builder-renderer:java-builder-client')
    implementation project(':languages:jsonschema')
    implementation project(':languages:typescript')
    implementation project(':languages:postman')
    implementation project(':languages:python')
    implementation project(':languages:php')
    implementation project(':languages:go')
    implementation project(':languages:csharp')
    implementation project(':languages:ramldoc')
    implementation project(':languages:oas')

    implementation gradleApi()
    implementation orgkotlin.stdlib
    testImplementation gradleTestKit()
}


gradlePlugin {
    plugins {
        gradlePlugin {
            id = 'com.commercetools.rmf.codegen-plugin'
            implementationClass = 'io.vrap.rmf.codegen.plugin.RamlCodegenPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/commercetools/rmf-codegen'
    vcsUrl = 'https://github.com/commercetools/rmf-codegen/tree/main/tools/codegen-gradle-plugin'
    plugins {
        gradlePlugin {
            id = 'com.commercetools.rmf.codegen-plugin'
            displayName = 'Raml codegenerator'
            description = 'This a code generator for the ramle specification, the supported language for this version is java'
            tags = ['RAML', 'java']
        }
    }
}

shadowJar {
    zip64 true
    append "plugin.properties"
}

task createClasspathManifest {
    def outputDir = file("$buildDir/testClasspath")
    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir
    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-under-test-metadata.properties").text = "implementation-classpath="+sourceSets.main.runtimeClasspath.join(":")
    }
}

// Add the classpath file to the test runtime classpath
dependencies {
    testRuntimeOnly files(createClasspathManifest)
}

compileJava.finalizedBy(createClasspathManifest)
