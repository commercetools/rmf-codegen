import java.nio.file.Paths

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.palantir.graal'
apply plugin: 'kotlin-kapt'

graal {
    mainClass 'io.vrap.rmf.codegen.cli.MainKt'
    outputName 'rmf-codegen'
    javaVersion '11'
    // force building a native image and rather let if fail at runtime instead of building a fallback image
    option '--allow-incomplete-classpath'
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    scm {
        connection "scm:git:$scmHttpsUrl"
        developerConnection "scm:git:$scmSshUrl"
        url "$scmProjectUrl"
    }
}

publishing {
    repositories {
        maven {
            if (version.status == 'release') {
                url("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
            } else {
                url("https://oss.sonatype.org/content/repositories/snapshots/")
            }
            credentials {
                username System.getenv('CTP_OSS_USER') ?: ''
                password System.getenv("CTP_OSS_SECRET") ?: ''
            }
        }
    }
    publications {
        Maven(MavenPublication) {
            artifact sourcesJar
            artifact shadowJar
            artifact javadocJar
            artifactId = project.name
            version version
            groupId group

            pom {
                name = project.name
                description = project.description
                developers {
                    developer {
                        id = "jenschude"
                        name = "Jens Schulze"
                        email = "jens.schulze@commercetools.com"
                    }
                }
                url = scmHttpsUrl
            }
            pom.withXml {
                def root = asNode()
                root.children().last() + pomConfig
            }
        }
    }

    signing {
        useGpgCmd()
        sign publishing.publications.Maven
    }
}

String dir = "${buildDir.toString()}/gensrc/main/kotlin/io/vrap/rmf/codegen/cli/info"

dependencies {
    implementation project(':languages:javalang:builder-renderer:java-builder-client')
    implementation project(':languages:javalang:java-renderer')
    implementation project(':languages:typescript')
    implementation project(':languages:postman')
    implementation project(':languages:python')
    implementation project(':languages:php')
    implementation project(':languages:go')
    implementation project(':languages:csharp')
    implementation project(':languages:ramldoc')
    implementation project(':languages:oas')
    implementation project(':languages:bruno')
    api project(':ctp-validators')
    api swagger.swagger_parser
    api swagger.swagger_converter
    api 'net.sourceforge.plantuml:plantuml:1.2022.13'
    api 'org.eclipse.elk:org.eclipse.elk.core:0.8.1'
    api 'org.eclipse.elk:org.eclipse.elk.graph:0.8.1'
    api 'org.eclipse.elk:org.eclipse.elk.alg.layered:0.8.1'
    api 'org.eclipse.elk:org.eclipse.elk.alg.mrtree:0.8.1'

    implementation orgkotlin.stdlib
    implementation google.guava
    implementation picocli.cli
    kapt picocli.codegen
    implementation directory_watcher.watcher
    implementation rxjava.rxjava

    implementation jackson_core.dataformat_xml
    implementation jackson_core.kotlin
    implementation woodstox.core
}



shadowJar {
    manifest {
        attributes 'Main-Class': 'io.vrap.rmf.codegen.cli.MainKt'
    }
    append "plugin.properties"
    archiveFileName = 'rmf-codegen.jar'
    minimize()
    destinationDirectory = file("../..")
    minimize {
        exclude(dependency("org.jetbrains.kotlin:.*"))
    }
}

artifacts {
    archives shadowJar
}

task generateBuildInfo {
    doFirst {
        mkdir(dir)
        file(Paths.get("$dir/BuildInfo.kt")).text = """
package io.vrap.rmf.codegen.cli.info

object BuildInfo {
    const val VERSION = "$version"
}
"""

    }
}

compileKotlin.dependsOn generateBuildInfo
tasks.build.dependsOn tasks.shadowJar

sourceSets.main.kotlin.srcDirs += "${buildDir}/gensrc/main/kotlin/"
