import java.nio.file.Paths

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.20'
    id "org.jetbrains.kotlin.kapt" version "1.4.20"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.palantir.graal'

graal {
    mainClass 'io.vrap.rmf.codegen.cli.MainKt'
    outputName 'rmf-codegen'
    javaVersion '11'
    // force building a native image and rather let if fail at runtime instead of building a fallback image
    options.add("--allow-incomplete-classpath")
    // options.add("--report-unsupported-elements-at-runtime")
    options.add("--no-fallback")
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    scm {
        connection "scm:git:$scmHttpsUrl"
        developerConnection "scm:git:$scmSshUrl"
        url "$scmProjectUrl"
    }
}

publishing {
    repositories {
        maven {
            if (version.status == 'release') {
                url("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
            } else {
                url("https://oss.sonatype.org/content/repositories/snapshots/")
            }
            credentials {
                username System.getenv('CTP_OSS_USER') ?: ''
                password System.getenv("CTP_OSS_SECRET") ?: ''
            }
        }
    }
    publications {
        Maven(MavenPublication) {
            artifact sourcesJar
            artifact shadowJar
            artifact javadocJar
            artifactId = project.name
            version version
            groupId group

            pom {
                name = project.name
                description = project.description
                developers {
                    developer {
                        id = "jenschude"
                        name = "Jens Schulze"
                        email = "jens.schulze@commercetools.com"
                    }
                }
                url = scmHttpsUrl
            }
            pom.withXml {
                def root = asNode()
                root.children().last() + pomConfig
            }
        }
    }

    signing {
        useGpgCmd()
        sign publishing.publications.Maven
    }
}

String dir = "${buildDir.toString()}/gensrc/main/kotlin/io/vrap/rmf/codegen/cli/info"

dependencies {
    compile project(':languages:javalang:builder-renderer:java-builder-client')
    compile project(':languages:typescript')
    compile project(':languages:postman')
    compile project(':languages:python')
    compile project(':languages:php')
    compile project(':languages:csharp')
    compile project(':languages:ramldoc')
    compile project(':languages:oas')

    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    compile 'com.google.guava:guava:30.0-jre'
    compile 'info.picocli:picocli:4.5.2'
    kapt 'info.picocli:picocli-codegen:4.5.2'
    compile group: 'io.methvin', name: 'directory-watcher', version: '0.9.9'
    implementation "io.reactivex.rxjava3:rxjava:3.0.8"
}



shadowJar {
    manifest {
        attributes 'Main-Class': 'io.vrap.rmf.codegen.cli.MainKt'
    }
    append "plugin.properties"
    archiveFileName = 'rmf-gen.jar'
    minimize()
    destinationDirectory = file("../..")
}

artifacts {
    archives shadowJar
}

task generateBuildInfo {
    doFirst {
        mkdir(dir)
        file(Paths.get("$dir/BuildInfo.kt")).text = """
package io.vrap.rmf.codegen.cli.info

object BuildInfo {
    const val VERSION = "$version"
}
"""

    }
}

compileKotlin.dependsOn generateBuildInfo
tasks.build.dependsOn tasks.shadowJar

sourceSets.main.kotlin.srcDirs += "${buildDir}/gensrc/main/kotlin/"
